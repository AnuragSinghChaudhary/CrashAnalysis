curVal = 1400
bet = max(wk*curVal,1)
for(flip in sim){
#print(flip)
bet = max(wk*curVal,1)
if(flip==1){
series[counter]=curVal+bet
curVal = curVal+bet
}
else{
series[counter]=curVal-35*bet
curVal = curVal - 35*bet
}
counter=counter+1
}
return(series)
}
sims <- apply(Draws,1,simul)
#sims <- t(sims)
ts_sims <- ts(sims)
q <- 37/38.0
p <- 1-q
P <- 1400
win <- 1
loss <- 35
N_timesteps <- 5
N_samplepaths <- 10
Draws <- sign(q-matrix(runif(N_timesteps * N_samplepaths),nrow=N_timesteps))
simul <- function(sim){
print(sim)
series = c(1.0)
counter=1
wk = 2.0/38
curVal = 1400
bet = max(wk*curVal,1)
for(flip in sim){
#print(flip)
bet = max(wk*curVal,1)
if(flip==1){
series[counter]=curVal+bet
curVal = curVal+bet
}
else{
series[counter]=curVal-35*bet
curVal = curVal - 35*bet
}
counter=counter+1
}
return(series)
}
sims <- apply(Draws,1,simul)
#sims <- t(sims)
ts_sims <- ts(sims)
plot(ts_sims,'single',head="Roulette Simulations for 10 tosses on 5 timesteps")
plot(ts_sims,'single',title="Roulette Simulations for 10 tosses on 5 timesteps")
plot(ts_sims,'single',main="Roulette Simulations for 10 tosses on 5 timesteps")
q <- 37/38.0
p <- 1-q
P <- 1400
win <- 1
loss <- 35
N_timesteps <- 6
N_samplepaths <- 15
Draws <- sign(q-matrix(runif(N_timesteps * N_samplepaths),nrow=N_timesteps))
simul <- function(sim){
print(sim)
series = c(1.0)
counter=1
wk = 2.0/38
curVal = 1400
bet = max(wk*curVal,1)
for(flip in sim){
#print(flip)
bet = max(wk*curVal,1)
if(flip==1){
series[counter]=curVal+bet
curVal = curVal+bet
}
else{
series[counter]=curVal-35*bet
curVal = curVal - 35*bet
}
counter=counter+1
}
return(series)
}
sims <- apply(Draws,1,simul)
#sims <- t(sims)
ts_sims <- ts(sims)
plot(ts_sims,'single',main="Roulette Simulations for 15 tosses on 6 timesteps")
q <- 37/38.0
p <- 1-q
P <- 1400
win <- 1
loss <- 35
N_timesteps <- 6
N_samplepaths <- 15
Draws <- sign(q-matrix(runif(N_timesteps * N_samplepaths),nrow=N_timesteps))
simul <- function(sim){
print(sim)
series = c(1.0)
counter=1
wk = 2.0/38
curVal = 1400
bet = min(max(wk*curVal,1),curVal)
for(flip in sim){
#print(flip)
bet = as.integer(max(wk*curVal,1))
if(flip==1){
series[counter]=curVal+bet
curVal = curVal+bet
}
else{
series[counter]=max(0,curVal-35*bet)
curVal = max(0,curVal - 35*bet)
}
counter=counter+1
}
return(series)
}
sims <- apply(Draws,1,simul)
#sims <- t(sims)
ts_sims <- ts(sims)
plot(ts_sims,'single',main="Roulette Simulations for 15 tosses on 6 timesteps")
q <- 37/38.0
p <- 1-q
P <- 1400
win <- 1
loss <- 35
N_timesteps <- 6
N_samplepaths <- 15
Draws <- sign(q-matrix(runif(N_timesteps * N_samplepaths),nrow=N_timesteps))
simul <- function(sim){
print(sim)
series = c(1.0)
counter=1
wk = 2.0/38
curVal = 1400
bet = min(max(wk*curVal,1),curVal)
for(flip in sim){
#print(flip)
bet = as.integer(min(max(wk*curVal,1)),curVal)
if(flip==1){
series[counter]=curVal+bet
curVal = curVal+bet
}
else{
series[counter]=max(0,curVal-35*bet)
curVal = max(0,curVal - 35*bet)
}
counter=counter+1
}
return(series)
}
sims <- apply(Draws,1,simul)
#sims <- t(sims)
ts_sims <- ts(sims)
plot(ts_sims,'single',main="Roulette Simulations for 15 tosses on 6 timesteps")
q <- 37/38.0
p <- 1-q
P <- 1400
win <- 1
loss <- 35
N_timesteps <- 6
N_samplepaths <- 15
Draws <- sign(q-matrix(runif(N_timesteps * N_samplepaths),nrow=N_timesteps))
simul <- function(sim){
print(sim)
series = c(1.0)
counter=1
wk = 2.0/38
curVal = 1400
bet = min(max(wk*curVal,1),curVal)
for(flip in sim){
#print(flip)
bet = as.integer(min(max(wk*curVal,1)),curVal)
if(flip==1){
series[counter]=curVal+bet
curVal = curVal+bet
}
else{
series[counter]=max(0,curVal-35*bet)
curVal = max(0,curVal - 35*bet)
}
counter=counter+1
}
return(series)
}
sims <- apply(Draws,1,simul)
#sims <- t(sims)
ts_sims <- ts(sims)
plot(ts_sims,'single',main="Roulette Simulations for 15 tosses on 6 timesteps")
wks <- sims[,15]
wks <- sims[15,]
q <- 37/38.0
p <- 1-q
P <- 1400
win <- 1
loss <- 35
N_timesteps <- 6
N_samplepaths <- 15
Draws <- sign(q-matrix(runif(N_timesteps * N_samplepaths),nrow=N_timesteps))
simul <- function(sim){
print(sim)
series = c(1.0)
counter=1
wk = 2*2.0/38
curVal = 1400
bet = min(max(wk*curVal,1),curVal)
for(flip in sim){
#print(flip)
bet = as.integer(min(max(wk*curVal,1)),curVal)
if(flip==1){
series[counter]=curVal+bet
curVal = curVal+bet
}
else{
series[counter]=max(0,curVal-35*bet)
curVal = max(0,curVal - 35*bet)
}
counter=counter+1
}
return(series)
}
sims <- apply(Draws,1,simul)
#sims <- t(sims)
ts_sims <- ts(sims)
plot(ts_sims,'single',main="Roulette Simulations for 15 tosses on 6 timesteps")
#wks <- sims[15,]
wks2 <- sims[15,]
q <- 37/38.0
p <- 1-q
P <- 1400
win <- 1
loss <- 35
N_timesteps <- 6
N_samplepaths <- 15
Draws <- sign(q-matrix(runif(N_timesteps * N_samplepaths),nrow=N_timesteps))
simul <- function(sim){
print(sim)
series = c(1.0)
counter=1
wk = (2.0/38)/2
curVal = 1400
bet = min(max(wk*curVal,1),curVal)
for(flip in sim){
#print(flip)
bet = as.integer(min(max(wk*curVal,1)),curVal)
if(flip==1){
series[counter]=curVal+bet
curVal = curVal+bet
}
else{
series[counter]=max(0,curVal-35*bet)
curVal = max(0,curVal - 35*bet)
}
counter=counter+1
}
return(series)
}
sims <- apply(Draws,1,simul)
#sims <- t(sims)
ts_sims <- ts(sims)
plot(ts_sims,'single',main="Roulette Simulations for 15 tosses on 6 timesteps")
#wks <- sims[15,]
#wks2 <- sims[15,]
halfwks <- sims[15,]
hist(halfwks)
d <- density(halfwks)
plot(d)
plot(d, main="Distribution of Terminal Capital for half-kelly betting",xlab="$ Amount",ylab="frequency")
plot(d, main="Distribution of Terminal Capital for half-kelly betting",xlab="$ Amount",ylab="density")
d <- density(wks2)
plot(d, main="Distribution of Terminal Capital for twice kelly betting",xlab="$ Amount",ylab="density")
d <- density(wks)
plot(d, main="Distribution of Terminal Capital for kelly betting",xlab="$ Amount",ylab="density")
install.packages("Rsymphony")
install.packages("Rsymphony")
install.packages("Rsymphony",type="source")
1:3
c(1:3)
returns <- c(1:50)
returns <- returns/100.0
returns <- c(1:50)
returns <- returns/100.0
A <- t(Iota)%*%solve(covM)%*%Iota
B <- t(mu)%*%solve(covM)%*%Iota
C <- t(mu)%*%solve(covM)%*%mu
mu_p <- returns^2
fraction <- A/(A*C-B^2)
sigma_p <- sqrt(returns*(mu_p*fraction))
sigma_p <- returns*(mu_p*fraction)
sigma_p <- lapply(sigma_p,sqrt)
sigma_p
sqrt(4)
sigma_p <- returns*(mu_p*fraction)
sigma_p <- sigma_p^(1.0/2)
sigma_p <- returns*(mu_p*fraction)
sigma_p <- rapply(sigma_p,sqrt)
sigma_p <- rapply(sigma_p,sqrt)
sigma_p <- apply(sigma_p,1,sqrt)
returns <- c(1:50)
returns <- returns/100.0
A <- t(Iota)%*%solve(covM)%*%Iota
B <- t(mu)%*%solve(covM)%*%Iota
C <- t(mu)%*%solve(covM)%*%mu
mu_p <- returns
fraction <- sqrt(A/(A*C-B^2))
sigma_p <- returns*(mu_p*fraction)
sigma_p <- sigma_p
fraction <- (A/(A*C-B^2))^(1.0/2)
fraction <- (A/(A*C-B^2))
View(stock_returns)
mu <- apply(stock_returns,2,mean)
mu <- apply(stock_returns,2,mean)[1:690]
A <- t(Iota)%*%solve(covM)%*%Iota
B <- t(mu)%*%solve(covM)%*%Iota
C <- t(mu)%*%solve(covM)%*%mu
fraction <- (A/(A*C-B^2))
fraction <- (A/(A*C-B^2))^(1.0/2)
sigma_p <- returns*(fraction)
plot(sigma_p,returns,main="Efficient Frontier Plot",xlab="Volatility",ylab="Returns")
returns <- c(1:50)
returns <- returns/100.0
#mu <- apply(stock_returns,2,mean)[1:690]
mu <- returns
A <- t(Iota)%*%solve(covM)%*%Iota
B <- t(mu)%*%solve(covM)%*%Iota
C <- t(mu)%*%solve(covM)%*%mu
mu_p <- returns
fraction <- (A/(A*C-B^2))^(1.0/2)
sigma_p <- returns*(fraction)
plot(sigma_p,returns,main="Efficient Frontier Plot for Mean Reversion",xlab="Volatility",ylab="Returns")
returns <- c(1:50)
returns <- returns/100.0
mu <- apply(stock_returns,2,mean)[1:690]
A <- t(Iota)%*%solve(covM)%*%Iota
B <- t(mu)%*%solve(covM)%*%Iota
C <- t(mu)%*%solve(covM)%*%mu
mu_p <- returns
fraction <- (A/(A*C-B^2))^(1.0/2)
sigma_p <- returns*(fraction)
plot(sigma_p,returns,main="Efficient Frontier Plot for Mean Reversion",xlab="Volatility",ylab="Returns")
returns <- c(1:15)
returns <- returns/100.0
mu <- apply(stock_returns,2,mean)[1:690]
A <- t(Iota)%*%solve(covM)%*%Iota
B <- t(mu)%*%solve(covM)%*%Iota
C <- t(mu)%*%solve(covM)%*%mu
mu_p <- returns
fraction <- (A/(A*C-B^2))^(1.0/2)
sigma_p <- returns*(fraction)
plot(sigma_p,returns,main="Efficient Frontier Plot for Mean Reversion",xlab="Volatility",ylab="Returns")
mean(wks)
mean(wks2)
mean(halfwks)
q <- 37/38.0
p <- 1-q
P <- 1400
win <- 1
loss <- 35
N_timesteps <- 60
N_samplepaths <- 15
Draws <- sign(q-matrix(runif(N_timesteps * N_samplepaths),nrow=N_timesteps))
simul <- function(sim){
print(sim)
series = c(1.0)
counter=1
wk = (2.0/38)
curVal = 1400
bet = min(max(wk*curVal,1),curVal)
for(flip in sim){
#print(flip)
bet = as.integer(min(max(wk*curVal,1)),curVal)
if(flip==1){
series[counter]=curVal+bet
curVal = curVal+bet
}
else{
series[counter]=max(0,curVal-35*bet)
curVal = max(0,curVal - 35*bet)
}
counter=counter+1
}
return(series)
}
sims <- apply(Draws,1,simul)
wks <- sims[15,]
mean(wks)
median(wks)
sd(wks)
min(wks)
q <- 37/38.0
p <- 1-q
P <- 1400
win <- 1
loss <- 35
N_timesteps <- 60
N_samplepaths <- 15
Draws <- sign(q-matrix(runif(N_timesteps * N_samplepaths),nrow=N_timesteps))
simul <- function(sim){
print(sim)
series = c(1.0)
counter=1
wk = (2.0/38)*2
curVal = 1400
bet = min(max(wk*curVal,1),curVal)
for(flip in sim){
#print(flip)
bet = as.integer(min(max(wk*curVal,1)),curVal)
if(flip==1){
series[counter]=curVal+bet
curVal = curVal+bet
}
else{
series[counter]=max(0,curVal-35*bet)
curVal = max(0,curVal - 35*bet)
}
counter=counter+1
}
return(series)
}
sims <- apply(Draws,1,simul)
#sims <- t(sims)
ts_sims <- ts(sims)
wks2 <- sims[15,]
mean(wks2)
median(wks2)
sd(wks2)
min(wks2)
q <- 37/38.0
p <- 1-q
P <- 1400
win <- 1
loss <- 35
N_timesteps <- 60
N_samplepaths <- 15
Draws <- sign(q-matrix(runif(N_timesteps * N_samplepaths),nrow=N_timesteps))
simul <- function(sim){
print(sim)
series = c(1.0)
counter=1
wk = (2.0/38)/2
curVal = 1400
bet = min(max(wk*curVal,1),curVal)
for(flip in sim){
#print(flip)
bet = as.integer(min(max(wk*curVal,1)),curVal)
if(flip==1){
series[counter]=curVal+bet
curVal = curVal+bet
}
else{
series[counter]=max(0,curVal-35*bet)
curVal = max(0,curVal - 35*bet)
}
counter=counter+1
}
return(series)
}
sims <- apply(Draws,1,simul)
#sims <- t(sims)
ts_sims <- ts(sims)
# plot(ts_sims,'single',main="Roulette Simulations for 15 tosses on 6 timesteps")
#wks <- sims[15,]
#wks2 <- sims[15,]
halfwks <- sims[15,]
mean(halfwks)
median(halfwks)
sd(halfwks)
min(halfwks)
d <- density(wks)
plot(d, main="Distribution of Terminal Capital for kelly betting",xlab="$ Amount",ylab="density")
d <- density(wks2)
plot(d, main="Distribution of Terminal Capital for kelly betting",xlab="$ Amount",ylab="density")
install.packages("installr")
require('installr')
updateR()
update.packages()
library(readr)
myData <- read_csv("~/Documents/World_Bank/crash_project/CrashAnalysis/test_data.csv")
View(myData)
install.packages('ggmap')
require(ggmap)
test <- bin2(as.matrix(myData[,c('lat',lon)]))
require(ash)
require('ash')
require('ashr')
install.packages('ash')
require(ash)
test <- bin2(as.matrix(myData[,c('lat',lon)]))
test <- bin2(as.matrix(myData[,c('lat','lon')]))
View(test)
test[2]
test[3]
View(test)
View(test[1])
View(test[2])
library(shiny); runApp('Documents/World_Bank/crash_project/CrashAnalysis/visual.R')
runApp('Documents/World_Bank/crash_project/CrashAnalysis/visual.R')
runApp('Documents/World_Bank/crash_project/CrashAnalysis/visual.R')
runApp('Documents/World_Bank/crash_project/CrashAnalysis/visual.R')
runApp('Documents/World_Bank/crash_project/CrashAnalysis/visual.R')
runApp('Documents/World_Bank/crash_project/CrashAnalysis/visual.R')
runApp('Documents/World_Bank/crash_project/CrashAnalysis/visual.R')
runApp('Documents/World_Bank/crash_project/CrashAnalysis/visual.R')
runApp('Documents/World_Bank/crash_project/CrashAnalysis/visual.R')
sessionInfo()
library(shiny); runApp('Documents/World_Bank/crash_project/CrashAnalysis/visual.R')
runApp('Documents/World_Bank/crash_project/CrashAnalysis/visual.R')
library(shiny); runApp('Documents/World_Bank/crash_project/CrashAnalysis/visual.R')
source('~/Documents/World_Bank/crash_project/CrashAnalysis/publish_shiny.R')
